/* Welcome to the SQL mini project. You will carry out this project partly in
the PHPMyAdmin interface, and partly in Jupyter via a Python connection.

This is Tier 2 of the case study, which means that there'll be less guidance for you about how to setup
your local SQLite connection in PART 2 of the case study. This will make the case study more challenging for you: 
you might need to do some digging, aand revise the Working with Relational Databases in Python chapter in the previous resource.

Otherwise, the questions in the case study are exactly the same as with Tier 1. 

PART 1: PHPMyAdmin
You will complete questions 1-9 below in the PHPMyAdmin interface. 
Log in by pasting the following URL into your browser, and
using the following Username and Password:

URL: https://sql.springboard.com/
Username: student
Password: learn_sql@springboard

The data you need is in the "country_club" database. This database
contains 3 tables:
    i) the "Bookings" table,
    ii) the "Facilities" table, and
    iii) the "Members" table.

In this case study, you'll be asked a series of questions. You can
solve them using the platform, but for the final deliverable,
paste the code for each solution into this script, and upload it
to your GitHub.

Before starting with the questions, feel free to take your time,
exploring the data, and getting acquainted with the 3 tables. */


/* QUESTIONS 
/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */

SELECT name, membercost
FROM Facilities
WHERE membercost > 0;


/* Q2: How many facilities do not charge a fee to members? */

SELECT COUNT(*)
FROM Facilities
WHERE membercost = 0;


/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */

SELECT facid, name, membercost, monthlymaintenance
FROM Facilities 
WHERE membercost < (.2 * monthlymaintenance);


/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. */

SELECT * 
FROM Facilities 
WHERE facid IN (1,5);


/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */

SELECT name, monthlymaintenance,
CASE 
	WHEN monthlymaintenance > 100 THEN 'expensive'
	ELSE 'cheap'
END As cost
FROM Facilities;


/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */

SELECT firstname, surname
FROM Members 
WHERE joindate = 
	(SELECT MAX(joindate)
     FROM Members);


/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

SELECT CONCAT (firstname, " ",surname) As mem, f.name
FROM Members As m
INNER JOIN Bookings As b ON m.memid = b.memid
INNER JOIN Facilities As f on b.facid = f.facid
WHERE f.facid IN (0,1)
GROUP BY mem
ORDER BY mem DESC;


/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

SELECT f.name, CONCAT (m.firstname, " ", m.surname) As User,
CASE 
	WHEN b.memid != 0 THEN b.slots * f.membercost
	ELSE b.slots * f.guestcost
END AS COST
FROM Facilities As f
INNER JOIN Bookings As b ON f.facid = b.facid
INNER JOIN Members As m ON b.memid = m.memid
WHERE 
	CASE WHEN b.memid != 0 AND b.slots * f.membercost > 30 THEN b.slots * f.membercost
		WHEN b.memid = 0 AND b.slots * f.guestcost > 30 THEN b.slots * f.guestcost
END = 'Cost'
		'Cost' IS NOT NULL
AND b.starttime Like '2012-09-14%'
ORDER BY COST DESC;



/* Q9: This time, produce the same result as in Q8, but using a subquery. */

SELECT fac, nombre, COST
FROM
	(SELECT f.name As fac, CONCAT (m.firstname," ",m.surname) As nombre, b.starttime As time,
     CASE
     	WHEN b.memid != 0 THEN b.slots * f.membercost
     	ELSE b.slots * f.guestcost
     END AS COST
     FROM Facilities As f
     INNER JOIN Bookings As b ON f.facid = b.facid
     INNER JOIN Members As m ON b.memid = m.memid
     WHERE
     	CASE WHEN b.memid != 0 AND b.slots * f.membercost > 30 THEN b.slots * f.membercost
     		WHEN b.memid = 0 AND b.slots * f.guestcost > 30 THEN b.slots * f.guestcost
    END = 'cost'
    	'cost' IS NOT NULL
    	ORDER BY COST DESC) AS C30
WHERE C30.time Like '2012-09-14%';

/* PART 2: SQLite

Export the country club data from PHPMyAdmin, and connect to a local SQLite instance from Jupyter notebook 
for the following questions.  

QUESTIONS:  ***I used the following to connect to the database:

import sqlite3
import pandas as pd
conn = sqlite3.connect(r'C:\Users\jsphh\OneDrive\Documents\SQLFiles Tier 2\sqlite_db_pythonsqlite.db')
cur = conn.cursor()


/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */

Q10 = pd.read_sql_query(
    """
    SELECT fac, nam, SUM(REV) As Total_Rev
    FROM(
    SELECT f.facid As fac, f.name As nam,
    CASE
        WHEN b.memid != 0 THEN b.slots * f.membercost
        ELSE b.slots * f.guestcost
    END AS REV
    FROM Facilities As f
    INNER JOIN Bookings As b
    ON f.facid = b.facid)
    GROUP BY fac, nam
    HAVING Total_Rev < 1000
    ORDER BY Total_Rev DESC;
    """,conn)

Print(Q10)


/* Q11: Produce a report of members and who recommended them in alphabetic surname,firstname order */

Q11 = pd.read_sql_query(
"""

SELECT CONCAT (n.surname,", ",n.firstname) As Member,
CONCAT (m.surname,", ",m.firstname) As Recommended
FROM Members As n
INNER JOIN Members As m
ON n.recommendedby = m.memid
WHERE m.memid !=0;
""",conn)
print(Q11)
/* Q12: Find the facilities with their usage by member, but not guests */
Q12 = pd.read_sql_query(
"""
SELECT f.name, b.memid, SUM(b.slots) As Usge
FROM Facilities As f
INNER JOIN Bookings As b
ON f.facid = b.facid
WHERE b.memid != 0
GROUP BY f.name, b.memid;
""",conn)
print(Q12)

/* Q13: Find the facilities usage by month, but not guests */

Q13 = pd.read_sql_query(
"""
SELECT MID(b.starttime,6,2) As Month,
f.name, SUM(b.slots) As usg
FROM Bookings As b
INNER JOIN Facilities As f
ON b.facid = f.facid
WHERE b.memid != 0
GROUP BY Month, f.name;
""",conn)
print(Q13)